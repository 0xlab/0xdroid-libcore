/*
 * Copyright (C) 2009 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package dalvik.jtreg;

import com.sun.javatest.TestDescription;
import com.sun.javatest.TestResult;
import com.sun.javatest.TestResultTable;
import com.sun.javatest.TestSuite;
import com.sun.javatest.WorkDirectory;
import com.sun.javatest.regtest.RegressionTestSuite;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.UUID;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.regex.Pattern;

/**
 * Scans a directory of jtreg tests and creates Dalvik-friendly {@code .jar}
 * files for each test. These tests will be executed by {@link TestRunner} when
 * their jar file is on the classpath. Because of the heavy use of the default
 * package by jtreg tests, it is not generally possible to run multiple tests
 * in the same dalvik VM.
 */
public class TestToDex {

    private static final String DALVIK_JTREG_HOME
            = "dalvik/libcore/tools/dalvik_jtreg";
    private static final File JTREG_JAR
            = new File(DALVIK_JTREG_HOME + "/lib/jtreg.jar");
    private static final File TEST_RUNNER_JAVA
            = new File(DALVIK_JTREG_HOME + "/java/dalvik/jtreg/TestRunner.java");

    private final Pattern JAVA_TEST_PATTERN = Pattern.compile("\\/(\\w)+\\.java$");

    private final File temp = new File("/tmp/" + UUID.randomUUID());
    private final ExecutorService executor = Executors.newFixedThreadPool(20);

    public void testsToDex(File directoryToScan, final File out) throws Exception {
        writeTestRunnerJar(out);

        System.out.print("Scanning " + directoryToScan + "...");
        List<TestDescription> tests = getTests(directoryToScan);
        System.out.println("done. Found " + tests.size() + " tests.");

        List<Future<File>> futures = new ArrayList<Future<File>>();
        for (final TestDescription testDescription : tests) {
            futures.add(executor.submit(new Callable<File>() {
                public File call() throws Exception {
                    return testToDex(testDescription, out);
                }
            }));
        }

        for (Future<File> future : futures) {
            try {
                future.get();
            } catch (ExecutionException e) {
                System.out.println("Failed: " + e.getMessage());
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }

        executor.shutdown();
    }

    /**
     * Creates a testrunner jar that can execute the packaged tests.
     */
    private void writeTestRunnerJar(File out) {
        // TODO: perform this step as a part of make

        File base = new File(temp, "testrunner");
        base.mkdirs();

        new Javac()
                .destination(base)
                .compile(TEST_RUNNER_JAVA);

        File output = new File(out, "testrunner.jar");
        new Dx().dex(output.toString(), base);

        System.out.println("Created: testrunner");
    }

    /**
     * Writes a Dalvik-friendly {@code .jar} for the described test.
     *
     * @param out the directory to receive the constructed {@code .jar}.
     * @return the path of the constructed {@code .jar}.
     */
    private File testToDex(TestDescription testDescription, File out)
            throws IOException {
        String qualifiedName = TestDescriptions.qualifiedName(testDescription);

        if (!JAVA_TEST_PATTERN.matcher(testDescription.getFile().toString()).find()) {
            System.out.println("Skipping: " + qualifiedName);
            return null;
        }

        File base = new File(temp, qualifiedName);
        base.mkdirs();

        // write a test descriptor
        Properties properties = TestDescriptions.toProperties(testDescription);
        FileOutputStream propertiesOut = new FileOutputStream(
                new File(base, TestRunner.TEST_PROPERTIES_FILE));
        properties.store(propertiesOut, "generated by " + getClass().getName());
        propertiesOut.close();

        try {
            // TODO(jessewilson): compile against the Android API .jar
            new Javac()
                    .classPath(testDescription.getDir(), JTREG_JAR)
                    .sourcePath(testDescription.getDir())
                    .destination(base)
                    .compile(testDescription.getFile());
        } catch (CommandFailedException e) {
            List<String> log = new ArrayList<String>();
            log.add("command: " + e.getArgs());
            log.addAll(e.getOutputLines());
            String lastLogMessage = log.get(log.size() - 1);
            File output = new File(out, qualifiedName + ".javac.txt");
            writeFile(output, log);
            System.out.println("Compile failed: " + qualifiedName + ": " + lastLogMessage);
            return null;
        }

        File output = new File(out, qualifiedName + ".jar");
        new Dx().dex(output.toString(), base, testDescription.getDir());

        System.out.println("Created: " + qualifiedName);
        return output;
    }

    private void writeFile(File target, List<String> lines) throws IOException {
        FileWriter writer = new FileWriter(target);
        for (String line : lines) {
            writer.append(line);
            writer.append("\n");
        }
        writer.close();
    }

    /**
     * Scans {@code directoryToScan} for test cases, using JTHarness + jtreg
     * behind the scenes.
     */
    private List<TestDescription> getTests(File directoryToScan) throws Exception {
        File workDirectory = new File(temp, "JTwork");
        workDirectory.mkdirs();

        /*
         * This code is capable of extracting test descriptions using jtreg 4.0
         * and its bundled copy of jtharness. As a command line tool, jtreg's
         * API wasn't intended for this style of use. As a consequence, this
         * code is fragile and may be incompatible with newer versions of jtreg.
         */
        TestSuite testSuite = new RegressionTestSuite(directoryToScan);
        WorkDirectory wd = WorkDirectory.convert(workDirectory, testSuite);
        TestResultTable resultTable = wd.getTestResultTable();

        List<TestDescription> result = new ArrayList<TestDescription>();
        for (Iterator i = resultTable.getIterator(); i.hasNext(); ) {
            TestResult testResult = (TestResult) i.next();
            result.add(testResult.getDescription());
        }
        return result;
    }

    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.out.println("Usage: TestToDex <directoryToScan> <out>");
            System.out.println();
            System.out.println("  directoryToScan: a directory containing test cases; typically");
            System.out.println("      this is 'platform_v6/jdk/test' if 'platform_v6' contains");
            System.out.println("      the sources of a platform implementation.");
            System.out.println();
            System.out.println("  out: the directory to receive constructed .jars for successful");
            System.out.println("      compilations and .javac.txt files for failed compilations.");
            System.out.println();
            return;
        }

        File directoryToScan = new File(args[0]);

        File out = new File(args[1]);
        out.mkdirs();
        new TestToDex().testsToDex(directoryToScan, out);
    }
}
