# This file contains expectations for tests that we don't ever intend to fix.

# We're retiring the security manager. Unfortunately, tests all over the place
# need to check that they're secure, so they all fail when we refuse to install
# a security manager. This suppresses all of these failures.
# http://b/issue?id=2585285
failure disable securityManager
result EXEC_FAILED
pattern .*java.lang.SecurityException\s+at java.lang.System.setSecurityManager.*


# ignore compilation errors due to different available APIs
failure ignore compilation errors
result COMPILE_FAILED
pattern .*\.java:\d+: cannot find symbol.*


# The RI avoids blocking calls when '\r' is the last character. We don't
# bother since that adds complexity to every other read call, and '\r' as the
# last character will be diminishingly rare anyway.
test java.io.BufferedReader.ReadLine
result EXEC_FAILED
pattern .*java.lang.RuntimeException: Read past limit.*

test java.io.BufferedReader.Ready
result EXEC_FAILED
pattern .*Hit infinite wait condition.*


# The test is checking that the implementation doesn't read any characters
# earlier than it absolutely needs to. This is a bogus requirement; streams
# are allowed to buffer input as necessary.
test java.io.StreamTokenizer.Reset
result EXEC_FAILED
pattern .*Test failed: should get token \[, but get -1.*


# These tests only pass if the root logger hasn't yet been initialized. They
# incorrectly assume that resetting the LogManager will clear the root logger's
# resource bundle; this isn't the case.
test org.apache.harmony.logging.tests.java.util.logging.LoggerTest#testGetLoggerWithRes_InvalidResourceBundle
result EXEC_FAILED
pattern .*java.lang.IllegalArgumentException: Resource bundle name 'impossible_not_existing' is inconsistent.*

test org.apache.harmony.logging.tests.java.util.logging.LoggerTest#testGetLogger_Empty
result EXEC_FAILED
pattern .*junit.framework.AssertionFailedError.*


# This tests implementation details
test java.util.EnumSet.OneUniverse
result UNSUPPORTED


# Dalvik doesn't include the "SunJCE" crypto provider
test com.sun.crypto.provider.Cipher.AES.Test4513830
result EXEC_FAILED
pattern .*NoClassDefFoundError: com.sun.crypto.provider.SunJCE.*

test com.sun.crypto.provider.Cipher.AES.Test4512704
result EXEC_FAILED
pattern .*NoClassDefFoundError: com.sun.crypto.provider.SunJCE.*

test com.sun.crypto.provider.Cipher.AES.Test4512524
result EXEC_FAILED
pattern .*NoClassDefFoundError: com.sun.crypto.provider.SunJCE.*

test com.sun.crypto.provider.Cipher.AES.Test4511676
result EXEC_FAILED
pattern .*NoClassDefFoundError: com.sun.crypto.provider.SunJCE.*

test com.sun.crypto.provider.Cipher.AES.Test4517355
result EXEC_FAILED
pattern .*NoClassDefFoundError: com.sun.crypto.provider.SunJCE.*

test com.sun.crypto.provider.Cipher.AES.TestISO10126Padding
result EXEC_FAILED
pattern .* java.security.NoSuchProviderException: SunJCE.*

test com.sun.crypto.provider.Cipher.AES.Test4626070
result EXEC_FAILED
pattern .*NoClassDefFoundError: com.sun.crypto.provider.SunJCE.*

test com.sun.crypto.provider.Cipher.AES.TestShortBuffer
result EXEC_FAILED
pattern .*Provider SunJCE is not available.*

test com.sun.crypto.provider.Cipher.CTS.CTSMode
result EXEC_FAILED
pattern .*Provider SunJCE is not available.*

test com.sun.crypto.provider.Cipher.DES.DesAPITest
result EXEC_FAILED
pattern .*java.lang.NoClassDefFoundError: com.sun.crypto.provider.SunJCE.*

test com.sun.crypto.provider.Cipher.DES.DoFinalReturnLen
result EXEC_FAILED
pattern .*java.lang.NoClassDefFoundError: com.sun.crypto.provider.SunJCE.*

test com.sun.crypto.provider.Cipher.DES.FlushBug
result EXEC_FAILED
pattern .*java.lang.NoClassDefFoundError: com.sun.crypto.provider.SunJCE.*

test com.sun.crypto.provider.Cipher.DES.KeyWrapping
result EXEC_FAILED
pattern .*Provider SunJCE is not available.*

test com.sun.crypto.provider.Cipher.DES.PaddingTest
result EXEC_FAILED
pattern .*java.lang.NoClassDefFoundError: com.sun.crypto.provider.SunJCE.*

test com.sun.crypto.provider.Cipher.DES.Sealtest
result EXEC_FAILED
pattern .*java.lang.NoClassDefFoundError: com.sun.crypto.provider.SunJCE.*

test com.sun.crypto.provider.Cipher.DES.PerformanceTest
result EXEC_FAILED
pattern .*java.lang.NoClassDefFoundError: com.sun.crypto.provider.SunJCE.*

test com.sun.crypto.provider.Cipher.PBE.DecryptWithoutParameters
result EXEC_FAILED
pattern .*Provider SunJCE is not available.*

test com.sun.crypto.provider.Cipher.PBE.PBEInvalidParamsTest
result EXEC_FAILED
pattern .*Provider SunJCE is not available.*

test com.sun.crypto.provider.Cipher.PBE.PBEKeysAlgorithmNames
result EXEC_FAILED
pattern .*java.security.NoSuchProviderException: SunJCE.*

test com.sun.crypto.provider.Cipher.PBE.PBEParametersTest
result EXEC_FAILED
pattern .*Provider SunJCE is not available.*

test com.sun.crypto.provider.Cipher.PBE.PKCS12Oid
result EXEC_FAILED
pattern .*Provider SunJCE is not available.*

test com.sun.crypto.provider.Cipher.UTIL.StrongOrUnlimited
result EXEC_FAILED
pattern .*Provider SunJCE is not available.*

test com.sun.crypto.provider.Cipher.KeyWrap.NISTWrapKAT
result EXEC_FAILED
pattern .*Provider SunJCE is not available.*

test com.sun.crypto.provider.KeyAgreement.DHGenSecretKey
result EXEC_FAILED
pattern .*java.security.NoSuchProviderException: SunJCE.*

test com.sun.crypto.provider.KeyAgreement.DHGenSharedSecret
result EXEC_FAILED
pattern .*java.lang.NoClassDefFoundError: com.sun.crypto.provider.SunJCE.*

test com.sun.crypto.provider.KeyAgreement.DHKeyAgreement3
result EXEC_FAILED
pattern .*java.lang.NoClassDefFoundError: com.sun.crypto.provider.SunJCE.*

test com.sun.crypto.provider.KeyAgreement.DHKeyFactory
result EXEC_FAILED
pattern .*java.lang.NoClassDefFoundError: com.sun.crypto.provider.SunJCE.*

test com.sun.crypto.provider.KeyAgreement.DHKeyGenSpeed
result EXEC_FAILED
pattern .*java.lang.NoClassDefFoundError: com.sun.crypto.provider.SunJCE.*

test com.sun.crypto.provider.KeyAgreement.TestExponentSize
result EXEC_FAILED
pattern .*java.security.NoSuchProviderException: SunJCE.*

test com.sun.crypto.provider.KeyFactory.TestProviderLeak
result EXEC_FAILED
pattern .*java.security.NoSuchProviderException: SunJCE.*

test com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest
result EXEC_FAILED
pattern .*java.security.NoSuchProviderException: SunJCE.*

test com.sun.crypto.provider.KeyGenerator.Test4628062
result EXEC_FAILED
pattern .*java.lang.NoClassDefFoundError: com.sun.crypto.provider.SunJCE.*

test com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength
result EXEC_FAILED
pattern .*java.lang.NoClassDefFoundError: com.sun.crypto.provider.SunJCE.*

test com.sun.crypto.provider.Mac.HmacPBESHA1
result EXEC_FAILED
pattern .*java.security.NoSuchProviderException: SunJCE.*

test com.sun.crypto.provider.Mac.HmacMD5
result EXEC_FAILED
pattern .*java.lang.NoClassDefFoundError: com.sun.crypto.provider.SunJCE.*

test com.sun.crypto.provider.Mac.MacClone
result EXEC_FAILED
pattern .*java.security.NoSuchProviderException: SunJCE.*

failure JKS keystore not found
result EXEC_FAILED
pattern .*KeyStore JKS implementation not found.*


# These NPEs all happen while calling Provider#getName on the result of
# Security#getProvider(). Unfortunately, that method is permitted to return
# null if the system has no provider with the requested name. And since we don't
# have the "SunJCE" provider, tests fail
test com.sun.crypto.provider.Cipher.PBE.PKCS12Cipher
result EXEC_FAILED
pattern .*PKCS12Cipher.java\:87\).*NullPointerException.*

test com.sun.crypto.provider.Cipher.PBE.PKCS12CipherKAT
result EXEC_FAILED
pattern .*NullPointerException.*PKCS12CipherKAT.java\:183\).*

test com.sun.crypto.provider.Cipher.RC2ArcFour.CipherKAT
result EXEC_FAILED
pattern .*NullPointerException.*CipherKAT.java\:205\).*

test com.sun.crypto.provider.Cipher.RSA.TestOAEP_KAT
result EXEC_FAILED
pattern .*TestOAEP_KAT.java\:62\).*NullPointerException.*

test com.sun.crypto.provider.Cipher.RSA.TestOAEP
result EXEC_FAILED
pattern .*TestOAEP.java\:50\).*NullPointerException.*

test com.sun.crypto.provider.Cipher.RSA.TestOAEPParameterSpec
result EXEC_FAILED
pattern .*TestOAEPParameterSpec.java\:124\).*NullPointerException.*

test com.sun.crypto.provider.Cipher.RSA.TestOAEPWithParams
result EXEC_FAILED
pattern .*TestOAEPWithParams.java\:58\).*NullPointerException.*

test com.sun.crypto.provider.Cipher.RSA.TestRSA
result EXEC_FAILED
pattern .*TestRSA.java\:171\).*NullPointerException.*

test com.sun.crypto.provider.Mac.HmacSaltLengths
result EXEC_FAILED
pattern .*HmacSaltLengths.java\:83\).*java.lang.NullPointerException.*

test com.sun.crypto.provider.Mac.MacKAT
result EXEC_FAILED
pattern .*MacKAT.java\:228\).*java.lang.NullPointerException.*


# These tests call into misc Sun classes that we don't have
test com.sun.crypto.provider.KeyAgreement.DHKeyAgreement2
result COMPILE_FAILED
pattern .*cannot find symbol.*sun.misc.HexDumpEncoder.*

test com.sun.crypto.provider.Cipher.KeyWrap.XMLEncKAT
result COMPILE_FAILED
pattern .*cannot find symbol.*sun.misc.BASE64Decoder.*

test com.sun.crypto.provider.TLS.TestKeyMaterial
result COMPILE_FAILED
pattern .*package sun.security.internal.spec does not exist.*

test com.sun.crypto.provider.TLS.TestMasterSecret
result COMPILE_FAILED
pattern .*package sun.security.internal.spec does not exist.*

test com.sun.crypto.provider.TLS.TestPremaster
result COMPILE_FAILED
pattern .*package sun.security.internal.spec does not exist.*

test com.sun.crypto.provider.TLS.TestPRF
result COMPILE_FAILED
pattern .*package sun.security.internal.spec does not exist.*


# We don't have most com.sun packages.
failure Dalvik doesn't include Sun packages
result COMPILE_FAILED
pattern .*package (com\.)?sun\.[\w\.]+ does not exist.*

# We don't have several Java packages either.
failure Dalvik doesn't include applets
result COMPILE_FAILED
pattern .*package java.applet does not exist.*

failure Dalvik doesn't include AWT (bug it has java.awt.font)
result COMPILE_FAILED
pattern .*package java.awt(\.image)? does not exist.*

failure Dalvik doesn't include NIO.2
result COMPILE_FAILED
pattern .*package java.nio.file does not exist.*

failure Dalvik doesn't include RMI
result COMPILE_FAILED
pattern .*package java.rmi does not exist.*

failure Dalvik doesn't include JNDI
result COMPILE_FAILED
pattern .*package javax.naming does not exist.*

failure Dalvik doesn't include JMX
result COMPILE_FAILED
pattern .*package java.lang.management does not exist.*

failure Dalvik doesn't include Swing
result COMPILE_FAILED
pattern .*package javax.swing.tree does not exist.*

failure Dalvik doesn't include javax.crypto
result COMPILE_FAILED
pattern .*package javax.xml.crypto does not exist.*

# Dalvik doesn't include a com.sun.net HTTP server
test com.sun.net.httpserver
result UNSUPPORTED

test sun.net.www
result UNSUPPORTED


# Dalvik doesn't include AWT except the font package
test java.awt
result UNSUPPORTED

test java.awt.FontClass
result SUCCESS

test java.awt.font
result SUCCESS


# Dalvik doesn't include java.beans except for property listeners
test java.beans
result UNSUPPORTED

test java.beans.PropertyChangeSupport
result SUCCESS


# Dalvik doesn't include java.lang.instrument
test java.lang.instrument
result UNSUPPORTED


# Dalvik doesn't include java.lang.management
test java.lang.management
result UNSUPPORTED


# Dalvik doesn't include RMI
test java.rmi
result UNSUPPORTED

test sun.rmi
result UNSUPPORTED

# Dalvik doesn't include javax.imageio
test javax.imageio
result UNSUPPORTED

# Dalvik doesn't include javax.management
test javax.management
result UNSUPPORTED

# Dalvik doesn't include javax.naming
test javax.naming
result UNSUPPORTED

# Dalvik doesn't include javax.print
test javax.print
result UNSUPPORTED

# Dalvik doesn't include javax.script
test javax.script
result UNSUPPORTED

# Dalvik doesn't include javax.sound
test javax.sound
result UNSUPPORTED


# Dalvik doesn't include javax.swing
test javax.swing
result UNSUPPORTED


# Dalvik doesn't include sun.management
test sun.management
result UNSUPPORTED


# Dalvik doesn't include javax.smartcardio
test sun.security.smartcardio
result UNSUPPORTED


# Our exception messages don't match the RIs
test java.lang.StringBuilder.Exceptions
result EXEC_FAILED
pattern .*got java\.lang\.StringIndexOutOfBoundsException: null - FAILED.*

test java.lang.StringBuffer.Exceptions
result EXEC_FAILED
pattern .*got java\.lang\.StringIndexOutOfBoundsException: null - FAILED.*


# ICU doesn't like 3-letter names like CST because they're ambiguous.
# Harmony prefers them because they're more human readable. We'll be
# consistent with ICU, since that seems least fragile.
# See https://issues.apache.org/jira/browse/HARMONY-5468
# and http://bugs.icu-project.org/trac/ticket/6174
test org.apache.harmony.luni.tests.java.util.DateTest#test_toString
result EXEC_FAILED
pattern .*GMT-07:00.*


# These harmony tests are broken. The RI doesn't ship with es__TRADITIONAL, so
# they have incorrect expectations.
# http://b/2608750

test org.apache.harmony.text.tests.java.text.RuleBasedCollatorTest#testGetCollationElementIteratorCharacterIterator
result EXEC_FAILED
pattern .*expected:<1> but was:<2>.*

test org.apache.harmony.text.tests.java.text.RuleBasedCollatorTest#testGetCollationElementIteratorString
result EXEC_FAILED
pattern .*expected:<1> but was:<2>.*

# This test fails because on Android, RuleBasedCollators default to
# CANONICAL_DECOMPOSITION, not NO_DECOMPOSITION.
test org.apache.harmony.text.tests.java.text.RuleBasedCollatorTest#testEqualsObject
result EXEC_FAILED
pattern .*expected:<0> but was:<1>.*


# These Harmony tests are enforcing a buggy behaviour in TreeMap, presumably to be bug-compatible
# with the RI. Our implementation is more conservative and throws on the bogus inputs.
test org.apache.harmony.luni.tests.java.util.TreeMapExtendTest#test_AscendingSubMapKeySet_headSet
result EXEC_FAILED
pattern .*java.lang.IllegalArgumentException: 100 not in range \(100..109\].*

test org.apache.harmony.luni.tests.java.util.TreeMapExtendTest#test_AscendingSubMapKeySet_tailSet
result EXEC_FAILED
pattern .*java.lang.IllegalArgumentException: null not in range \[100..109\).*

test org.apache.harmony.luni.tests.java.util.TreeMapExtendTest#test_DescendingSubMapKeySet_headSet
result EXEC_FAILED
pattern .*java.lang.IllegalArgumentException: null not in range \[100..109\).*

test org.apache.harmony.luni.tests.java.util.TreeMapExtendTest#test_DescendingSubMap_tailMap
result EXEC_FAILED
pattern .*java.lang.IllegalArgumentException: 100 not in range \(100..109\].*

test org.apache.harmony.luni.tests.java.util.TreeMapExtendTest#test_DescendingSubMapKeySet_tailSet
result EXEC_FAILED
pattern .*java.lang.IllegalArgumentException: 100 not in range \(100..109\].*

test org.apache.harmony.luni.tests.java.util.TreeMapExtendTest#test_SubMap_headMap
result EXEC_FAILED
pattern .*java.lang.IllegalArgumentException: 100 not in range \(100..109\].*

# why are they using reflection to test implementation details?
test org.apache.harmony.luni.tests.java.util.ArraysTest#test_swap_I_I_$Ljava_lang_Object
result EXEC_FAILED
pattern .*java.lang.NoSuchMethodException.*

# all these tests rely on a Harmony bug where TreeMaps may have a singleton null, which we choose
# to disallow.
test org.apache.harmony.luni.tests.java.util.SimpleImmutableEntryTest#test_SimpleImmutableEntry_Constructor_LEntry
result EXEC_FAILED
pattern .*java.lang.NullPointerException.*at java.util.TreeMap.find.*

test org.apache.harmony.luni.tests.java.util.TreeMapTest#test_ceilingEntry
result EXEC_FAILED
pattern .*java.lang.NullPointerException.*

test org.apache.harmony.luni.tests.java.util.TreeMapTest#test_ceilingKey
result EXEC_FAILED
pattern .*java.lang.NullPointerException.*

test org.apache.harmony.luni.tests.java.util.TreeMapTest#test_floorEntry
result EXEC_FAILED
pattern .*java.lang.NullPointerException.*

test org.apache.harmony.luni.tests.java.util.TreeMapTest#test_floorKey
result EXEC_FAILED
pattern .*java.lang.NullPointerException.*

test org.apache.harmony.luni.tests.java.util.TreeMapTest#test_higherEntry
result EXEC_FAILED
pattern .*java.lang.NullPointerException.*

test org.apache.harmony.luni.tests.java.util.TreeMapTest#test_higherKey
result EXEC_FAILED
pattern .*java.lang.NullPointerException.*

test org.apache.harmony.luni.tests.java.util.TreeMapTest#test_lowerEntry
result EXEC_FAILED
pattern .*java.lang.NullPointerException.*

test org.apache.harmony.luni.tests.java.util.TreeMapTest#test_lowerKey
result EXEC_FAILED
pattern .*java.lang.NullPointerException.*

test org.apache.harmony.luni.tests.java.util.TreeMapTest#test_illegalFirstNullKey
result EXEC_FAILED
pattern .*java.lang.NullPointerException.*at java.util.TreeMap.find.*

# this is testing exception priorities
test org.apache.harmony.luni.tests.java.util.TreeMapTest#test_subMapLjava_lang_ObjectLjava_lang_Object
result EXEC_FAILED
pattern .*java.lang.ClassCastException: java.lang.Object.*

# the null-friendly comparator isn't symmetric
test org.apache.harmony.luni.tests.java.util.TreeMapTest#test_subMapLjava_lang_ObjectZLjava_lang_ObjectZ
result EXEC_FAILED
pattern .*java.lang.NullPointerException.*

# we fail fast on not-comparable objects
test org.apache.harmony.luni.tests.java.util.TreeMapTest#test_equals
result EXEC_FAILED
pattern .*java.lang.ClassCastException: java.lang.Object.*

test org.apache.harmony.luni.tests.java.util.TreeMapTest#test_putLjava_lang_ObjectLjava_lang_Object
result EXEC_FAILED
pattern .*java.lang.ClassCastException: java.lang.Object.*

# tests that depend on the iteration order of a hash
test org.apache.harmony.luni.tests.java.util.CollectionsTest#test_unmodifiable_toString_methods
result EXEC_FAILED
pattern .*expected:<...one=1, two=2...> but was:<...two=2, one=1...>.*

test org.apache.harmony.luni.tests.java.util.HashtableTest#test_keySet_subtest1
result EXEC_FAILED
pattern .*java.lang.IllegalStateException.*at java.util.Hashtable.*

test org.apache.harmony.luni.tests.java.util.HashtableTest#test_elements_subtest0
result EXEC_FAILED
pattern .*junit.framework.AssertionFailedError: unexpected: b.*

test org.apache.harmony.luni.tests.java.util.HashMapTest#test_rehash
result EXEC_FAILED
pattern .*junit.framework.AssertionFailedError: expected same.*

test org.apache.harmony.luni.tests.java.util.PropertiesTest#test_SequentialpropertyNames
result EXEC_FAILED
pattern .*expected:<current.b.key> but was:<current.a.key>.*

test org.apache.harmony.luni.tests.java.util.PropertiesTest#test_SequentialstringPropertyNames
result EXEC_FAILED
pattern .*junit.framework.ComparisonFailure.*

test org.apache.harmony.luni.tests.java.util.PropertiesTest.test_propertyNames_sequence
result EXEC_FAILED
pattern .*junit.framework.AssertionFailedError: expected:<current.b.key> but was:<current.a.key>.*

test org.apache.harmony.luni.tests.java.util.PropertiesTest#test_propertyNames_sequence
result EXEC_FAILED
pattern .*junit.framework.AssertionFailedError: expected:<current.b.key> but was:<current.a.key>.*

# tests that use secret type information to reason about behavior
test org.apache.harmony.luni.tests.java.util.HashtableTest#test_keySet
result EXEC_FAILED
pattern .*junit.framework.ComparisonFailure: Not synchronized expected:<...Collections\$Synchronized...> but was:<...Hashtable\$Key...>.*

test org.apache.harmony.luni.tests.java.util.HashtableTest#test_entrySet
result EXEC_FAILED
pattern .*junit.framework.ComparisonFailure: Not synchronized expected:<...Collections\$Synchronized...> but was:<...Hashtable\$Entry...>.*

test org.apache.harmony.luni.tests.java.util.HashtableTest#test_values
result EXEC_FAILED
pattern .*junit.framework.ComparisonFailure: Not synchronized expected:<...Collections\$SynchronizedCollection> but was:<...Hashtable\$Values>.*

# this test is invalid, proxy.equals isn't symmetric
test org.apache.harmony.luni.tests.java.util.HashMapTest#test_proxies
result EXEC_FAILED

# this test is invalid, the mock map's entry set isn't to spec
test org.apache.harmony.luni.tests.java.util.HashMapTest#test_putAllLjava_util_Map
result EXEC_FAILED
pattern .*java.lang.NullPointerException.*

# this test assumes remove acts on equals() equality, not comparator equality
test org.apache.harmony.luni.tests.java.util.PriorityQueueTest#test_remove_Ljava_lang_Object_using_comparator
result EXEC_FAILED
pattern .*junit.framework.AssertionFailedError.*

# tests that violate the API and then guess about the outcomes
test org.apache.harmony.luni.tests.java.util.HashtableTest#test_getLjava_lang_Object
result EXEC_FAILED
pattern .*junit.framework.AssertionFailedError.*

# this test assumes Integer.toString() always returns a new instance
test org.apache.harmony.luni.tests.java.util.IdentityHashMap2Test#test_containsKeyLjava_lang_Object
result EXEC_FAILED
pattern .*junit.framework.AssertionFailedError: Returned true for copy of valid key.*

# tests that cast to Harmony-specific types
failure bogus cast to harmony Hashtable$KeyEnumeration
result EXEC_FAILED
pattern .*java.util.Hashtable\$KeyEnumeration.*

failure bogus cast to Hashtable$ValueEnumeration
result EXEC_FAILED
pattern .*java.util.Hashtable\$ValueEnumeration.*

# test doesn't expect it, but the spec permits the exception. RI also throws here.
test org.apache.harmony.luni.tests.java.util.PriorityQueueTest#test_remove_Ljava_lang_Object_not_Compatible
result EXEC_FAILED
pattern .*java.lang.ClassCastException.*

test org.apache.harmony.luni.tests.java.util.PriorityQueueTest#test_remove_Ljava_lang_Object_not_exists
result EXEC_FAILED
pattern .*java.lang.ClassCastException.*

# localization tests where our data disagree
test org.apache.harmony.luni.tests.java.util.LocaleTest#test_getAvailableLocales
result EXEC_FAILED
pattern .*Wrong number of locales.*

# test that enforce redundant implements clauses
test org.apache.harmony.luni.tests.java.util.LinkedHashMapTest#test_getInterfaces
result EXEC_FAILED
pattern .*junit.framework.AssertionFailedError: expected:<3> but was:<2>.*

# our behaviour is consistent with the JDK
test tests.api.java.math.BigDecimalTest#test_stripTrailingZero
result EXEC_FAILED
pattern .*junit.framework.AssertionFailedError: stripTrailingZero failed for 0.0000.*

# this is testing exception priorities
test org.apache.harmony.nio.tests.java.nio.channels.DatagramChannelTest#testReadByteBuffer_readOnlyBuf
result EXEC_FAILED
pattern .*java.lang.IllegalArgumentException: read-only buffer.*

# ICU doesn't provide localized pattern characters, and these tests assume the locale they're using has them.
test org.apache.harmony.text.tests.java.text.SimpleDateFormatTest#test_applyLocalizedPatternLjava_lang_String
result EXEC_FAILED
pattern .*java.lang.IllegalArgumentException: Invalid pattern character 'u' in 'GuMtkHmsSEDFwWahKz'.*
test org.apache.harmony.text.tests.java.text.SimpleDateFormatTest#test_toLocalizedPattern
result EXEC_FAILED
pattern .*junit.framework.AssertionFailedError: Wrong pattern: GyMdkHmsSEDFwWahKz.*
test org.apache.harmony.text.tests.java.text.DateFormatSymbolsTest#test_getLocalPatternChars
result EXEC_FAILED
pattern .*junit.framework.ComparisonFailure: Returned incorrect pattern string expected:<...YeugAZvcLQqV> but was:<...Z>.*

# we don't support the CharsetProvider spi, so we don't have "mockCharset00".
test tests.api.java.nio.charset.CharsetTest#test_availableCharsets
result EXEC_FAILED
pattern .*junit.framework.AssertionFailedError.*
test tests.api.java.nio.charset.CharsetTest#test_forNameLString
result EXEC_FAILED
pattern .*java.nio.charset.UnsupportedCharsetException: mockCharset00.*

# the average length of possible UTF-8 sequences is 2 bytes.
test tests.api.java.nio.charset.UTFCharsetEncoderTest#testSpecificDefaultValue
result EXEC_FAILED
pattern .*junit.framework.AssertionFailedError: expected:<1.1> but was:<2.0>.*

# this test needs external interaction
test com.sun.tools.attach.Application
result UNSUPPORTED

test java.io.SystemInAvailable
result UNSUPPORTED

test sun.jvmstat.testlibrary.Sleeper
result UNSUPPORTED


# these benchmarks take a long time and don't demonstrate correctness
test java.lang.Class.TypeCheckMicroBenchmark
result UNSUPPORTED

test java.nio.Buffer.SwapMicroBenchmark
result UNSUPPORTED

test java.util.ArrayList.RangeCheckMicroBenchmark
result UNSUPPORTED

test java.util.ArrayList.IteratorMicroBenchmark
result UNSUPPORTED


# This test is obsoleted by our java.lang.CharacterTest#test_valueOfC.
test org.apache.harmony.luni.tests.java.lang.CharacterImplTest#test_valueOfC
result EXEC_FAILED

# The RI is still on Unicode 4.0, we're on 5.2, and Harmony is inconsistent
# between its test for isJavaIdentifierPart(char) and isJavaIdentifierPart(int).
test org.apache.harmony.luni.tests.java.lang.CharacterTest.test_isJavaIdentifierPartC
result EXEC_FAILED


# We removed this: we don't support Pack200.
test org.apache.harmony.archive.tests.java.util.jar.Pack200Test
result UNSUPPORTED

# We removed this: we don't cache canonical paths.
test org.apache.harmony.luni.tests.java.io.FileCanonPathCacheTest
result UNSUPPORTED

# We removed this: we don't throw NotYetImplementedException.
test org.apache.harmony.luni.tests.util.NYITest
result UNSUPPORTED
